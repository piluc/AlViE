algorithmCategory=Divide et impera
algorithmName=Closest pair of points
algorithmDescription=A divide and conquer algorithm for computing the closest pair of points in a specified set
algorithmFileName=ClosestPair
algorithmVisualizationFileName=ClosestPair
candidateNodeColor=FFFFFF
constantSortTime=The time required to perform the sort operation is clearly constant.
emphasizedArcLabelFont=Courier-PLAIN-14
emphasizedLineThickness=2.0
emphasizedLineType=CONTINUE
emphasizedNodeColor=FF0000
firstLineColor=FF0000
graphTitle=Set of points
graphXMLDrawerOriginX=20
graphXMLDrawerOriginY=20
horizontalStripColor=F0F0F0
ieAfterTwoCalls=The minimum distance within the set of sky blue points and the one within the set of yellow points have been computed: these two distances have now to be compared with the minimum distance between two points in two different sets (that is, the merge step of the divide and conquer algorithm starts).
ieBetweenTwoCalls=The first recursive call terminated and the minimum distance between any two white points has been stored.
ieCandidateSelectionEnd=The sky blue and yellow points within the vertical strip have been selected. The algorithm has now to look for a distance between a sky blue point and a yellow point within the strip, which is smaller than the black bold distance.
ieEnd=The minimum distance within the set of points has been computed and it is shown in bold.
ieFirstDistanceComputed=The distance in red has been computed and has to be compared with the distances between the other two pairs of points.
ieFirstDistanceLessThanSecond=The red distance is less than the green one and it is the currently minum one.
ieFirstRecursiveCall=The algorithm starts the recursive divide and conquer computation.
ieLeftCandidateSelectionStart=The algorithm will now select all the sky blue points which are contained in the vertical strip centered on the red point and whose width is equal to the black bold distance.
ieMinimumDistanceFound=The minimum distance between any two points in the sky blue and yellow sets has been computed and it is shown in red.
ieNewDistanceNotMinimum=The red distance is less than the green one and it continues to be the current minimum distance.
ieNewMinimumDistanceFound=The red distance is less than the green one and it becomes the new current minimum distance.
ieNewRecursiveCall=The algorithm recursively continues in the set of white nodes.
ieNextLeftCandidate=The distances between the red point and the yellow points have to be compared with the current minimum distance. If a yellow point is below the horizontal strip centered at the red point and whose width is equal to the black bold distance, then this point can be ignored afterwards.
ieNextRightCandidateAbove=The white node is above the horizontal strip centered at the red point and whose width is equal to the black bold distance: then this point can now be ignored (even though it might be reconsidered afterwards). 
ieNextRightCandidateBelow=The white node is below the horizontal strip centered at the red point and whose width is equal to the black bold distance: then this point can be ignored now and afterwards. 
ieNodeIsCandidate=The white node is within the vertical strip.
ieNodeIsNotCandidate=The white node is not within the vertical strip.
iePointsSortedOnX=The points have been sorted with respect to their x-coordinate. The time required to perform the sort operation is O(nlogn) (by using, in this implementation, the merge sort algorithm).
iePointsSortedOnY=The points have been sorted with respect to their y-coordinate.
ieRightCandidateSelectionStart=The algorithm will now select all the yellow points which are contained in the vertical strip centered on the red point and whose width is equal to the shown distance.
ieSecondDistanceLessThanFirst=The red distance is less than the green one and it is the currently minum one.
ieSetHalved=Since the set of active points contains more than three points, then it is split into two (almost) equally sized parts.
ieSortingPointsOnX=The points have to be sorted in non decreasing order with respect their x-coordinate.
ieSortingPointsOnY=The points have to be sorted in non decreasing order with respect their y-coordinate.
ieStart=Array P of n points on which the closest pair distance has to be computed by means of the divide and conquer algorithm.
ieStripWidthComputed=The distance in red is less than the green one: this distance specifies the width of the vertical strip within which the algorithm has to look for smaller distances.
ieThirdDistanceMinimum=The distance in red is less than the green one and it is the minimum one.
ieThirdDistanceNotMinimum=The distance in red is less than the green on and it is the minimum one.
ieThreeNodeMinimumDistanceComputed=The minimum distance within the set of three white points has been computed and it is shown in red.
ieThreeNodeSet=Since the set contains three points only, the minimum distance can be found by means of an exhaustive search.
ieTwoNodeMinimumDistanceComputed=The minimum distance within the set of two white points has been computed and it is shown in red.
ieTwoNodeSet=Since the set contains two points only, the minimum distance is the distance between these two points.
inactiveNodeColor=AAAAAA
leftNodeColor=00FF00
linearSortTime=The time required to perform the sort operation is O(n) (by using a merge procedure identical to the one used in the merge sort algorithm).
mergeWaitingLeftNodeColor=00FFFF
mergeWaitingRightNodeColor=FFFF00
nodeColor=FFFFFF
nodeFont=Courier-PLAIN-12
nodeHeight=15
nodeWidth=15
nodeShape=Elliptical
notCandidateNodeColor=000000
pseudocodeEmphasizedLineColor=FFFF00
pseudocodeEmphasizedLineHeight=15
pseudocodeEmphasizedLineWidth=400
pseudocodeFileName=ClosestPairPseudocode
pseudocodeFont=Courier-PLAIN-12
pseudocodeLineHeight=15
pseudocodeLineWidth=400
pseudocodeOriginX=480
pseudocodeOriginY=20
pseudocodeTitle=Pseudo-code
pseudocodeVisible=true
rightNodeColor=0000FF
secondLineColor=00FF00
selectInputMessage=Choose the set of points
showSortSteps=true
splitLineColor=0000FF
splitLineOffset=15
splitLineThickness=2.0
stripLineTitle=Strips and splitting lines
stripWidthLineColor=000000
subroutinePseudocodeEmphasizedLineColor=FFFF00
subroutinePseudocodeEmphasizedLineHeight=15
subroutinePseudocodeEmphasizedLineWidth=400
subroutinePseudocodeFileName=ClosestPairSubroutinePseudocode
subroutinePseudocodeFont=Courier-PLAIN-12
subroutinePseudocodeLineHeight=15
subroutinePseudocodeLineWidth=400
subroutinePseudocodeOriginX=480
subroutinePseudocodeOriginY=20
subroutinePseudocodeTitle=Pseudo-code
verticalStripColor=FF00FF