#Visualization configuration
#Tue Oct 20 18:07:07 CEST 2009
aActiveColor=00FF00
aColor=FFFFFF
aDrawerOriginX=20
aDrawerOriginY=50
aFont=Courier-PLAIN-16
aInactiveColor=FFFFFF
aTitle=Input array
algorithmCategory=Divide et impera
algorithmDescription=A divide and conquer algorithm for computing the number of inversions within an integer array
algorithmFileName=InversionCounter
algorithmName=Counting inversions
algorithmVisualizationFileName=InversionCounter
bActiveColor=FFFFFF
bColor=000000
bDrawerOriginX=20
bDrawerOriginY=100
bFont=Courier-PLAIN-16
bInactiveColor=000000
bTitle=Merge array
fatherColor=00FF00
ieAfterFirstRecursiveCall=The number of inversion in the green sub-array has been computed and it is shown in the corresponding node of the tree
ieAfterLastReturn=The number of inversions in the green sub-array has been computed
ieAfterSecondRecursiveCall=The number of inversion in the green sub-array has been computed and it is shown in the corresponding node of the tree
ieBeforeFirstInvocation=The algorithm starts the recursive procedure with input the entire array
ieBeforeFirstRecursiveCall=The number of inversion in the green sub-array has to be computed
ieBeforeReturn=The number of inversions in the green sub-array is equal to the sum of the three colored nodes in the tree
ieBeforeSecondRecursiveCall=The number of inversion in the green sub-array has to be computed
ieEnd=The number of inversions in the input array is equal to 
ieLeftSmaller=The leftmost yellow element is smaller than the leftmost azure element\: it can be inserted in the sorted list without increasing the number of inversions
ieMergeEnding=The sorted list can now be copied in the green sub-array, thus concluding the merge-count operation
ieMergeStart=The yellow and azure sub-arrays have to be merged\: while sorting their union, the number of inversions will also be counted and shown in the green node of the tree
ieOneElement=The sub-array currently analyzed contains only one element\: in this case, the number of inversions is equal to 0
ieRemainingMergeLeft=The remaining yellow elements can be appended to the sorted list without increasing the number of inversions
ieRemainingMergeRight=The remaining azure elements can be appended to the sorted list without increasing the number of inversions 
ieRightSmaller=The leftmost azure element is smaller than the leftmost yellow element\: it can be inserted in the sorted list and the number of inversions must be increased by the number of remaining yellow elements
ieStart=Array of integers whose number of inversions have to be counted by means of the divide and conquer algorithm
leftColor=FFFF00
mergeDoneColor=AAAAAA
pseudocodeEmphasizedLineColor=FFFF00
pseudocodeEmphasizedLineHeight=15
pseudocodeEmphasizedLineWidth=450
pseudocodeFileName=InversionCounterPseudocode
pseudocodeFont=Courier-PLAIN-12
pseudocodeLineHeight=15
pseudocodeLineWidth=450
pseudocodeOriginX=400
pseudocodeOriginY=20
pseudocodeTitle=Pseudo-code
pseudocodeVisible=true
rightColor=00FFFF
selectInputMessage=Select the array of integers
treeDrawerOriginX=220
treeDrawerOriginY=150
treeFont=Courier-PLAIN-14
treeHeight=20
treeName=Recursive call tree
treeWidth=40

