#Visualization configuration
#Fri Nov 12 15:18:56 CET 2010
pseudocodeFileName=LCSPseudocode
ieEqualCharacters=In order to calculate the value of the azure node, since the corresponding two characters (in yellow) are equal, we have to add 1 to the value of the green node.
pseudocodeTitle=Pseudo-code
selectInputMessage=Select the two strings
pseudocodeFont=Courier-PLAIN-12
editGraphFont=Courier-PLAIN-14
ieEnd=The longest common subsequence has been computed and it is shown in yellow: the corresponding path in the edit graph is shown in green.
pseudocodeEmphasizedLineHeight=20
pseudocodeLineWidth=450
pseudocodeLineHeight=20
ieDifferentCharacters=In order to calculate the value of the azure node, since the corresponding two characters (in yellow) are different, we have to choose the biggest between the values of the two green nodes.
ieSInitialized=The lengths of the LCSs between the first symbols of v and the empty string and between the first symbols of w and the empty string have been initialized.
pseudocodeOriginY=50
pseudocodeOriginX=650
editGraphNewNodeColor=00FFFF
algorithmName=LCS (Jones-Pevzner)
editGraphPreviousNodeColor=00FF00
ieStart=Two character sequences of which we want to look for the longest common subsequence by means of the dynamic programming approach (each element of the dynamic programming table will contain both the length of the longest path and the direction North, West, or North-West).
pseudocodeEmphasizedLineWidth=450
pseudocodeEmphasizedLineColor=BBBBBB
algorithmCategory=Dynamic programming
editGraphTitle=Edit graph
ieElementComputed=The value of the azure node has been computed and the direction towards the previous node (in green) has been stored.
algorithmVisualizationFileName=LCS
editGraphXMLDrawerOriginY=50
editGraphXMLDrawerOriginX=20
deltaY=50
algorithmFileName=LCS
deltaX=50
editGraphCharNodeColor=FFFF00
algorithmDescription=A dynamic programming algorithm for computing the longest common subsequence of two strings.
pseudocodeVisible=true
ieLCSEnded=The length of a longest common subsequence has been computed and is shown in yellow: the sequence itself can now be computed by making use of the directions.
sequenceNode=00FF00
sequenceChar=FFFF00
v=ATCTGAT
w=TGCATA